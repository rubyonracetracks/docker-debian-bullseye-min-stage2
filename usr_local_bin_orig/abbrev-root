#!/bin/bash

# NOTE: set -o pipefail is needed to ensure that any error or failure causes the whole pipeline to fail.
# Without this specification, the CI status will provide a false sense of security by showing builds
# as succeeding in spite of errors or failures.
set -eo pipefail

ABBREV='<ABBREV>'
REGULAR_USER='<REGULAR_USER>'

T_BEGIN=$(date +'%s')

echo '--------------------'
echo 'ls -l /usr/local/bin'
ls -l /usr/local/bin

# Prepare apt-get
/usr/local/bin/aptget

# Set environment variables to cut down on annoying warning messages
export DEBIAN_FRONTEND='noninteractive'
export DEBCONF_NOWARNINGS='true'
export HOME=/root
export LC_ALL=C

echo '##########################'
echo "BEGIN $ABBREV-root actions"
echo '##########################'

echo "/usr/local/bin/check-$ABBREV" >> /usr/local/bin/check

echo '-----------------------'
echo 'apt-get install -y tree'
apt-get install -y tree

echo '----------------------'
echo 'apt-get install -y git'
apt-get install -y git

echo '---------------------------------------'
echo 'apt-get install -y curl ca-certificates'
apt-get install -y curl ca-certificates

echo '------------------------------------'
echo 'apt-get install -y python2.7 ansible'
apt-get install -y python2.7 ansible

echo '+++++++++++++++++++++++++++++++++++++'
echo 'BEGIN installing Heroku prerequisites'
echo '+++++++++++++++++++++++++++++++++++++'

echo '---------------------------------------------------------------------------------------------------------------'
echo 'apt-get install -y git wget ca-certificates openssh-client software-properties-common apt-transport-https gnupg'
apt-get install -y git wget ca-certificates openssh-client software-properties-common apt-transport-https gnupg

echo '++++++++++++++++++++++++++++++++++++++++'
echo 'FINISHED installing Heroku prerequisites'
echo '++++++++++++++++++++++++++++++++++++++++'

echo '+++++++++++++++++++++++'
echo 'BEGIN installing Heroku'
echo '+++++++++++++++++++++++'

echo 'Downloading Heroku to /usr/local/lib'
cd /usr/local/lib
curl https://cli-assets.heroku.com/heroku-linux-x64.tar.gz | tar xz

echo 'ln -s /usr/local/lib/heroku/bin/heroku /usr/local/bin/heroku'
ln -s /usr/local/lib/heroku/bin/heroku /usr/local/bin/heroku

echo '--------------'
echo 'heroku version'
su -c 'heroku version' $REGULAR_USER

echo '++++++++++++++++++++++++++'
echo 'FINISHED installing Heroku'
echo '++++++++++++++++++++++++++'

# Needed for NVM
echo '---------------------------------------------------------------------------'
echo 'apt-get install -y build-essential libssl-dev curl wget git ca-certificates'
apt-get install -y build-essential libssl-dev curl wget git ca-certificates

echo '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
echo 'BEGIN installing and configuring PostgreSQL for Ruby on Rails'

echo '-----------------------------'
echo 'apt-get install -y postgresql'
apt-get install -y postgresql

PG_VERSION="$(ls /etc/postgresql)"

echo '---------------------------------------'
echo 'Backing up original PostgreSQL settings'
PG_CONF="/etc/postgresql/$PG_VERSION/main/postgresql.conf"
PG_CONF_ORIG="/etc/postgresql/$PG_VERSION/main/postgresql_orig.conf"
PG_CONF_PREF="/etc/postgresql/$PG_VERSION/main/postgresql_preferred.conf"
PG_HBA="/etc/postgresql/$PG_VERSION/main/pg_hba.conf"
PG_HBA_ORIG="/etc/postgresql/$PG_VERSION/main/pg_hba_orig.conf"
PG_HBA_PREF="/etc/postgresql/$PG_VERSION/main/pg_hba_preferred.conf"
cp $PG_CONF $PG_CONF_ORIG
cp $PG_HBA $PG_HBA_ORIG

echo '--------------------'
echo "Configuring $PG_CONF"
sed -i 's/^port = .*/port = 5432/' $PG_CONF
sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/" $PG_CONF
cp $PG_CONF $PG_CONF_PREF

echo '-------------------'
echo "Configuring $PG_HBA"
echo "# Database administrative login by Unix domain socket" | tee $PG_HBA
echo "local   all             postgres                                peer" | tee -a $PG_HBA
echo "" | tee -a $PG_HBA
echo "# TYPE  DATABASE        USER            ADDRESS                 METHOD" | tee -a $PG_HBA
echo "" | tee -a $PG_HBA
echo "# local is for Unix domain socket connections only" | tee -a $PG_HBA
echo "local   all             all                                     md5" | tee -a $PG_HBA
echo "" | tee -a $PG_HBA
echo "# IPv4 local connections:" | tee -a $PG_HBA
echo "host    all             all             0.0.0.0/0            md5" | tee -a $PG_HBA
echo "" | tee -a $PG_HBA
echo "# IPv6 local connections:" | tee -a $PG_HBA
echo "host    all             all             ::1/128                 md5" | tee -a $PG_HBA
echo "" | tee -a $PG_HBA
echo "host    all             all             all                     md5" | tee -a $PG_HBA
cp $PG_HBA $PG_HBA_PREF

# The PostgreSQL server is NOT automatically started in Docker.
# Setting the 'smart' flag (instead of the default 'fast' flag) prevents
# the error message "Problem: FATAL:  the database system is starting up"
echo '------------------------'
echo 'Configuring /etc/rc.conf'
echo 'postgresql_flags="-s -m smart"' > /etc/rc.conf

echo 'FINISHED installing and configuring PostgreSQL for Ruby on Rails'
echo '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'

apt-get install -y libssl-dev # Needed to install Ruby 2.3.*

apt-get install -y libpq-dev # Needed for pg gem
apt-get install -y sqlite3 # SQLite3
apt-get install -y libsqlite3-dev # Needed for sqlite3 gem
apt-get install -y redis-server # Some Rails apps use Redis
apt-get install -y graphviz # Needed for railroady and rails-erd gems
apt-get install -y imagemagick # Needed for image parameters in Rails projects
apt-get install -y libgtk-3-0 libgtkmm-3.0-dev libnotify-dev # Needed for the Rails server
apt-get install -y libcurl4-openssl-dev libxml2-dev # Needed for the fog gem

echo '#############################'
echo "FINISHED $ABBREV-root actions"
echo '#############################'

su -c /usr/local/bin/$ABBREV-user1 $REGULAR_USER
su -c /usr/local/bin/$ABBREV-user2 $REGULAR_USER
/usr/local/bin/finalize-root
su -c /usr/local/bin/finalize-user $REGULAR_USER
su -c /usr/local/bin/check $REGULAR_USER

T_FINISH=$(date +'%s')
T_ELAPSED=$(($T_FINISH-$T_BEGIN))
echo '--------------------------------'
echo 'Time to modify the Docker image:'
echo "$(($T_ELAPSED / 60)) minutes and $(($T_ELAPSED % 60)) seconds"
